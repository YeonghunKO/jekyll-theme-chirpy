<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yeonghunko.github.io/</id><title>노력도 재능이다.</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-11-09T11:38:13+09:00</updated> <author> <name>YeonghunKO</name> <uri>https://yeonghunko.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://yeonghunko.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yeonghunko.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 YeonghunKO </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>애플 웹사이트 만들기 시작! - HTML구조짜기</title><link href="https://yeonghunko.github.io/posts/apple1/" rel="alternate" type="text/html" title="애플 웹사이트 만들기 시작! - HTML구조짜기" /><published>2021-07-24T00:00:00+09:00</published> <updated>2021-07-24T00:00:00+09:00</updated> <id>https://yeonghunko.github.io/posts/apple1/</id> <content src="https://yeonghunko.github.io/posts/apple1/" /> <author> <name>YeonghunKO</name> </author> <category term="Javascript" /> <category term="apple" /> <summary> 1. 애플 웹사이트 인프런에서 신기한 강의를 발견함. 애플 공식웹에서 구현한 기능, 즉 스크롤 값에 따라서 글자와 사진이 커졌다 줄어들었다 사라졌다하는 기능을 가르치는 강의를 발견했다. 구매한지는 4개월이상 된거 같은데 자바스크립트 기초 문법좀 더 다지고, 알고리즘 공부하느라고 최근에 듣기 시작했다. 근데, 너무 재밌다. 어려운건 없다. 알고리즘 공부를 해서 그런가 웬만한 로직과 문법은 이해가 된다. 다만, 접근법이 참 신기해서 배울점이 많다. 그래서 하나하나 세세하게 구현하는 과정을 서술하지는 않을 것이다. 배우던 도중에 새로알게된 사실이나, 알고있었지만 나중에 유용하게 사용될것 같은 지식만 간단하게 설명하고 넘어가려고 한다. 2. HTML global / local nav로... </summary> </entry> <entry><title>to do list - list 순서 유지</title><link href="https://yeonghunko.github.io/posts/vanila14/" rel="alternate" type="text/html" title="to do list - list 순서 유지" /><published>2021-03-06T00:00:00+09:00</published> <updated>2021-03-06T00:00:00+09:00</updated> <id>https://yeonghunko.github.io/posts/vanila14/</id> <content src="https://yeonghunko.github.io/posts/vanila14/" /> <author> <name>YeonghunKO</name> </author> <category term="Javascript" /> <category term="todo-list" /> <summary> 1. jquery 코드 옮기기 드래그 기능을 구현했었는데 그 위치가 새로고침되어도 유지가 되는 기능은 구현하지 못했었다.(어쩌면 못한게 아니라 안한건지도..) 그러다고 우연히 드래그위치가 유지되는 기능을 구현한 다른사람의 코드를 보게되었고 적용했다. 우선 html에 있는 jquery 코드가 눈에 거슬렸다. 따라서 todoo.js로 이동시켜주었다. function dragEnable() { var script = document.createElement("script"); script.innerHTML = ` $(function () { $('#js_pending').sortable({ axis: 'y', revert: true, scroll: tr... </summary> </entry> <entry><title>새로 배운 문법</title><link href="https://yeonghunko.github.io/posts/carrot11/" rel="alternate" type="text/html" title="새로 배운 문법" /><published>2021-02-26T00:00:00+09:00</published> <updated>2021-02-26T00:00:00+09:00</updated> <id>https://yeonghunko.github.io/posts/carrot11/</id> <content src="https://yeonghunko.github.io/posts/carrot11/" /> <author> <name>YeonghunKO</name> </author> <category term="Javascript" /> <category term="carrot-game" /> <summary> 1. 새로 배운 문법 요번에 나름 새로 배운 문법이 많아서 정리해두려고 한다. 굳이 자세하게 설명하진 않겠다. 검색하면 다 나오니깐 말이다. 1-1. array와 관련된 문법 pop() array의 마지막 원소를 제거한 array를 리턴한다. sort() 알파벳 순서, 또는 숫자 순서대로 array를 분류한다. default는 오름차순이다. 그러나 default sort를 사용하면 숫자를 분류할때 맨앞자리만 놓고 분류하므로 실제 숫자의 크기대로 비교하지 않는다. 이때는 sort안에 분류함수를 pass해줘야한다. 아래처럼 말이다. reduce() pass한 함수대로 array를 계산하며 단일 값을 리턴함 1-2. mutationObserver 이름 그대로 변동사항... </summary> </entry> <entry><title>폭죽 다듬기</title><link href="https://yeonghunko.github.io/posts/carrot10/" rel="alternate" type="text/html" title="폭죽 다듬기" /><published>2021-02-26T00:00:00+09:00</published> <updated>2021-02-26T00:00:00+09:00</updated> <id>https://yeonghunko.github.io/posts/carrot10/</id> <content src="https://yeonghunko.github.io/posts/carrot10/" /> <author> <name>YeonghunKO</name> </author> <category term="Javascript" /> <category term="carrot-game" /> <summary> 1. 폭죽이 서서히 없어지게 하기 일단 애니메이션이 한 번 실행되면 cancel될때까지 1초에 60번 실행된다. 따라서 서서히 없애려면 explode 안에 num이라는 변수를 만들고 실행될때마다 추가되도록 한다. 그럼 num이 100단위로 커질때 마다 폭죽 array안에 있는 스파크를 하나씩 줄이면 되지 않을까? 라는 생각을 했다. fireworks.js let num = 0; function explode() { num++; switch (num) { case 100: fireworks.length = 8; break; case 250: fireworks.length = 5; break; case 300: fi... </summary> </entry> <entry><title>신기록을 알아차리기 그리고 폭죽터뜨리기</title><link href="https://yeonghunko.github.io/posts/carrot9/" rel="alternate" type="text/html" title="신기록을 알아차리기 그리고 폭죽터뜨리기" /><published>2021-02-25T00:00:00+09:00</published> <updated>2021-02-25T00:00:00+09:00</updated> <id>https://yeonghunko.github.io/posts/carrot9/</id> <content src="https://yeonghunko.github.io/posts/carrot9/" /> <author> <name>YeonghunKO</name> </author> <category term="Javascript" /> <category term="carrot-game" /> <summary> 1. 신기록 갱신 우선 신기록을 갱신할때마다 알려줘야한다. 그 기능을 구현하고 폭죽을 구현해보자. 그럼 알고리즘을 어떻게 짜면 될까? 맨처음엔 어떻게 생각했냐면 html 에 first ranking 의 innerHtml이 바뀔때 마다 알려주는 API가 없을까 라고 검색하던 도중 발견한게 하나 있다. 바로 MutationObserver 라는 API이다. 근데 사실은, paint함수때문에 게임이 최초 실행될때마다 , 또는 게임이 끝날때 마다 first ranking이 다시 새로쓰여지기 때문에 매번 trigger 될것이다. 따라서 의미 없다.(그래도 유용하게 쓰일지 몰라 나중에 새로알게된 문법에 정리하려고 한다.) 그럼 알고리즘을 짜야한다. 어떻게 짜야할까? 1. 게임을 다 완료한 순간 걸리는 시간을 ... </summary> </entry> </feed>
